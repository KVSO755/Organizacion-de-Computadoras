section .data
num1 db 5             ; Primer número (byte)
num2 db 11            ; Segundo número (byte)
result db 0           ; Variable para almacenar el resultado
msg db 'Resultado: ', 0 ; Mensaje de texto

section .bss
buffer resb 4         ; Espacio para almacenar carácter ASCII (resultado)

section .text
global _start

_start:
mov al, [num1]        ; Carga el valor de num1 en AL
add al, [num2]        ; Suma el valor de num2 al valor en AL
mov [result], al      ; Guarda el resultado de la suma en 'result'

; Convertir el resultado a ASCII
movzx eax, byte [result] ; Expande el byte sin signo a 32 bits
add eax, 48               ; Suma 48 para convertir a su carácter ASCII (0 = 48)
mov [buffer], al          ; Almacena el carácter en buffer

; Imprimir el mensaje
mov eax, 4        ; syscall write
mov ebx, 1        ; file descriptor (stdout)
mov ecx, msg      ; dirección del mensaje
mov edx, 11       ; longitud del mensaje
int 0x80          ; interrupción del sistema

; Imprimir el resultado (carácter ASCII)
mov eax, 4
mov ebx, 1
mov ecx, buffer
mov edx, 1
int 0x80

; Finalizar programa
mov eax, 1
xor ebx, ebx
int 0x80


section .data
num1 db 10       ; 10 + 7 = 17, 17 + 48 = 65 (A)
num2 db 7
result db 0
msg db 'Resultado: ', 0

section .bss
buffer resb 4

section .text
global _start

_start:
mov al, [num1]
add al, [num2]
mov [result], al

movzx eax, byte [result]
add eax, 48
mov [buffer], al

mov eax, 4
mov ebx, 1
mov ecx, msg
mov edx, 11
int 0x80

mov eax, 4
mov ebx, 1
mov ecx, buffer
mov edx, 1
int 0x80

mov eax, 1
xor ebx, ebx
int 0x80



section .data

num1 db 5
num2 db 11
result db 0
msg db &#39;Resultado: &#39;, 0
section .bss
buffer resb 4
section .text
global _start
_start:
mov al, [num1]
add al, [num2]
mov [result], al
; Convertir el resultado a ASCII
movzx eax, byte [result]
add eax, 48 ; Convertir el valor numérico en su
correspondiente ASCII (&#39;0&#39; = 48)
mov [buffer], al ; Almacenar el carácter ASCII en el
buffer
mov eax, 4
mov ebx, 1
mov ecx, msg
mov edx, 11
int 0x80

mov eax, 4
mov ebx, 1
mov ecx, buffer
mov edx, 1
int 0x80
mov eax, 1
xor ebx, ebx
int 0x80
