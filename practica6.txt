section .data
    char db 0
    newline db 10

section .text
    global _start

_start:
    mov al, 'A'        ; AL = 0100 0001 = 0x41
    shl al, 1          ; Resultado: 1000 0010 = 0x82 = no imprimible

    mov [char], al

    ; Escribir carácter en consola
    mov eax, 4         ; syscall write
    mov ebx, 1         ; stdout
    mov ecx, char
    mov edx, 1         ; 1 byte
    int 0x80

    ; Salto de línea
    mov eax, 4
    mov ebx, 1
    mov ecx, newline
    mov edx, 1
    int 0x80

    ; Salir
    mov eax, 1         ; syscall exit
    xor ebx, ebx       ; código de salida 0
    int 0x80

















section .data
    char db 0
    newline db 10

section .text
    global _start

_start:
    ; Sumar dos números distintos
    mov al, 65        ; AL =  (antes de la rotación)

    ; Rotar a la derecha (ROR)


    ; Guardar en char
    mov [char], al

    ; Escribir carácter en consola
    mov eax, 4         ; syscall write
    mov ebx, 1         ; stdout
    mov ecx, char
    mov edx, 1         ; 1 byte
    int 0x80

    ; Salto de línea
    mov eax, 4
    mov ebx, 1
    mov ecx, newline
    mov edx, 1
    int 0x80

    ; Salir
    mov eax, 1         ; syscall exit
    xor ebx, ebx       ; código de salida 0
    int 0x80













section .data
    char db 0
    newline db 10

section .text
    global _start

_start:
    mov al, 'A'        ; AL = 0100 0001 = 0x41
    shr al, 1          ; Resultado: 0010 0000 = 0x20 = espacio

    mov [char], al

    ; Escribir carácter en consola
    mov eax, 4         ; syscall write
    mov ebx, 1         ; stdout
    mov ecx, char
    mov edx, 1         ; 1 byte
    int 0x80

    ; Salto de línea
    mov eax, 4
    mov ebx, 1
    mov ecx, newline
    mov edx, 1
    int 0x80

    ; Salir
    mov eax, 1         ; syscall exit
    xor ebx, ebx       ; código de salida 0
    int 0x80

















section .data
    char db 0
    newline db 10

section .text
    global _start

_start:
    mov al, 'A'        ; AL = 0100 0001
    rol al, 1          ; Resultado: 1000 0010 = 0x82

    mov [char], al

    ; Escribir carácter en consola
    mov eax, 4         ; syscall write
    mov ebx, 1         ; stdout
    mov ecx, char
    mov edx, 1         ; 1 byte
    int 0x80

    ; Salto de línea
    mov eax, 4
    mov ebx, 1
    mov ecx, newline
    mov edx, 1
    int 0x80

    ; Salir
    mov eax, 1         ; syscall exit
    xor ebx, ebx       ; código de salida 0
    int 0x80

















section .data
    char db 0
    newline db 10

section .text
    global _start

_start:
    mov al, 'A'        ; AL = 0100 0001
    ror al, 1          ; Resultado: 1010 0000 = 0xA0 = espacio no rompible

    mov [char], al


    ; Escribir carácter en consola
    mov eax, 4         ; syscall write
    mov ebx, 1         ; stdout
    mov ecx, char
    mov edx, 1         ; 1 byte
    int 0x80

    ; Salto de línea
    mov eax, 4
    mov ebx, 1
    mov ecx, newline
    mov edx, 1
    int 0x80

    ; Salir
    mov eax, 1         ; syscall exit
    xor ebx, ebx       ; código de salida 0
    int 0x80
















b. 0
section .data
    char db 0
    newline db 10

section .text
    global _start

_start:
    mov al, '0'        ; AL = 0011 0000
    shl al, 1          ; Resultado = 0110 0000 = 96 (ASCII '`')

    mov [char], al



    ; Escribir carácter en consola
    mov eax, 4         ; syscall write
    mov ebx, 1         ; stdout
    mov ecx, char
    mov edx, 1         ; 1 byte
    int 0x80

    ; Salto de línea
    mov eax, 4
    mov ebx, 1
    mov ecx, newline
    mov edx, 1
    int 0x80

    ; Salir
    mov eax, 1         ; syscall exit
    xor ebx, ebx       ; código de salida 0
    int 0x80














section .data
    char db 0
    newline db 10

section .text
    global _start

_start:
    mov al, '0'        ; AL = 0011 0000
    shE al, 1          ; Resultado = 0110 0000 = 96 (ASCII '`')

    mov [char], al



    ; Escribir carácter en consola
    mov eax, 4         ; syscall write
    mov ebx, 1         ; stdout
    mov ecx, char
    mov edx, 1         ; 1 byte
    int 0x80

    ; Salto de línea
    mov eax, 4
    mov ebx, 1
    mov ecx, newline
    mov edx, 1
    int 0x80

    ; Salir
    mov eax, 1         ; syscall exit
    xor ebx, ebx       ; código de salida 0
    int 0x80















section .data
    char db 0
    newline db 10

section .text
    global _start

_start:
    mov al, '0'        ; AL = 0011 0000
    rol al, 1          ; Resultado = 0110 0000 = 96 (ASCII '`')

    mov [char], al



    ; Escribir carácter en consola
    mov eax, 4         ; syscall write
    mov ebx, 1         ; stdout
    mov ecx, char
    mov edx, 1         ; 1 byte
    int 0x80

    ; Salto de línea
    mov eax, 4
    mov ebx, 1
    mov ecx, newline
    mov edx, 1
    int 0x80

    ; Salir
    mov eax, 1         ; syscall exit
    xor ebx, ebx       ; código de salida 0
    int 0x80















section .data
    char db 0
    newline db 10

section .text
    global _start

_start:
    mov al, '0'        ; AL = 0011 0000
    ror al, 1          ; Resultado = 0110 0000 = 96 (ASCII '`')

    mov [char], al



    ; Escribir carácter en consola
    mov eax, 4         ; syscall write
    mov ebx, 1         ; stdout
    mov ecx, char
    mov edx, 1         ; 1 byte
    int 0x80

    ; Salto de línea
    mov eax, 4
    mov ebx, 1
    mov ecx, newline
    mov edx, 1
    int 0x80

    ; Salir
    mov eax, 1         ; syscall exit
    xor ebx, ebx       ; código de salida 0
    int 0x80















c.- g
section .data
    char db 0
    newline db 10

section .text
    global _start

_start:
    mov al, 'g'        ; AL = 0011 0000
    shl al, 1          ; Resultado = 0110 0000 = 96 (ASCII '`')

    mov [char], al



    ; Escribir carácter en consola
    mov eax, 4         ; syscall write
    mov ebx, 1         ; stdout
    mov ecx, char
    mov edx, 1         ; 1 byte
    int 0x80

    ; Salto de línea
    mov eax, 4
    mov ebx, 1
    mov ecx, newline
    mov edx, 1
    int 0x80

    ; Salir
    mov eax, 1         ; syscall exit
    xor ebx, ebx       ; código de salida 0
    int 0x80














section .data
    char db 0
    newline db 10

section .text
    global _start

_start:
    mov al, 'g'        ; AL = 0011 0000
    shr al, 1          ; Resultado = 0110 0000 = 96 (ASCII '`')

    mov [char], al



    ; Escribir carácter en consola
    mov eax, 4         ; syscall write
    mov ebx, 1         ; stdout
    mov ecx, char
    mov edx, 1         ; 1 byte
    int 0x80

    ; Salto de línea
    mov eax, 4
    mov ebx, 1
    mov ecx, newline
    mov edx, 1
    int 0x80

    ; Salir
    mov eax, 1         ; syscall exit
    xor ebx, ebx       ; código de salida 0
    int 0x80















section .data
    char db 0
    newline db 10

section .text
    global _start

_start:
    mov al, 'g'        ; AL = 0011 0000
    rol al, 1          ; Resultado = 0110 0000 = 96 (ASCII '`')

    mov [char], al



    ; Escribir carácter en consola
    mov eax, 4         ; syscall write
    mov ebx, 1         ; stdout
    mov ecx, char
    mov edx, 1         ; 1 byte
    int 0x80

    ; Salto de línea
    mov eax, 4
    mov ebx, 1
    mov ecx, newline
    mov edx, 1
    int 0x80

    ; Salir
    mov eax, 1         ; syscall exit
    xor ebx, ebx       ; código de salida 0
    int 0x80















section .data
    char db 0
    newline db 10

section .text
    global _start

_start:
    mov al, 'g'        ; AL = 0011 0000
    ror al, 1          ; Resultado = 0110 0000 = 96 (ASCII '`')

    mov [char], al



    ; Escribir carácter en consola
    mov eax, 4         ; syscall write
    mov ebx, 1         ; stdout
    mov ecx, char
    mov edx, 1         ; 1 byte
    int 0x80

    ; Salto de línea
    mov eax, 4
    mov ebx, 1
    mov ecx, newline
    mov edx, 1
    int 0x80

    ; Salir
    mov eax, 1         ; syscall exit
    xor ebx, ebx       ; código de salida 0
    int 0x80















d.-=
section .data
    char db 0
    newline db 10

section .text
    global _start

_start:
    mov al, '='        ; AL = 0011 0000
    shl al, 1          ; Resultado = 0110 0000 = 96 (ASCII '`')

    mov [char], al



    ; Escribir carácter en consola
    mov eax, 4         ; syscall write
    mov ebx, 1         ; stdout
    mov ecx, char
    mov edx, 1         ; 1 byte
    int 0x80

    ; Salto de línea
    mov eax, 4
    mov ebx, 1
    mov ecx, newline
    mov edx, 1
    int 0x80

    ; Salir
    mov eax, 1         ; syscall exit
    xor ebx, ebx       ; código de salida 0
    int 0x80














section .data
    char db 0
    newline db 10

section .text
    global _start

_start:
    mov al, '='        ; AL = 0011 0000
    shr al, 1          ; Resultado = 0110 0000 = 96 (ASCII '`')

    mov [char], al



    ; Escribir carácter en consola
    mov eax, 4         ; syscall write
    mov ebx, 1         ; stdout
    mov ecx, char
    mov edx, 1         ; 1 byte
    int 0x80

    ; Salto de línea
    mov eax, 4
    mov ebx, 1
    mov ecx, newline
    mov edx, 1
    int 0x80

    ; Salir
    mov eax, 1         ; syscall exit
    xor ebx, ebx       ; código de salida 0
    int 0x80















section .data
    char db 0
    newline db 10

section .text
    global _start

_start:
    mov al, '='        ; AL = 0011 0000
    rol al, 1          ; Resultado = 0110 0000 = 96 (ASCII '`')

    mov [char], al



    ; Escribir carácter en consola
    mov eax, 4         ; syscall write
    mov ebx, 1         ; stdout
    mov ecx, char
    mov edx, 1         ; 1 byte
    int 0x80

    ; Salto de línea
    mov eax, 4
    mov ebx, 1
    mov ecx, newline
    mov edx, 1
    int 0x80

    ; Salir
    mov eax, 1         ; syscall exit
    xor ebx, ebx       ; código de salida 0
    int 0x80















section .data
    char db 0
    newline db 10

section .text
    global _start

_start:
    mov al, '='        ; AL = 0011 0000
    ror al, 1          ; Resultado = 0110 0000 = 96 (ASCII '`')

    mov [char], al



    ; Escribir carácter en consola
    mov eax, 4         ; syscall write
    mov ebx, 1         ; stdout
    mov ecx, char
    mov edx, 1         ; 1 byte
    int 0x80

    ; Salto de línea
    mov eax, 4
    mov ebx, 1
    mov ecx, newline
    mov edx, 1
    int 0x80

    ; Salir
    mov eax, 1         ; syscall exit
    xor ebx, ebx       ; código de salida 0
    int 0x80


